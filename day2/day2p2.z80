; Note: Need an extra blank line at the end of the file
#include    "ti83plus.inc"
#define     progStart   $9D95
.org        progStart-2
.db         $BB,$6D
; Proc: main
    ; Look up Str1              ;
    LD HL, _constStr1Tok        ;
    bcall(_Mov9ToOP1)           ;
    bcall(_FindSym)             ; DE = findSym(Str1)
    ; Print errors if not found ;
    JP C, _eSymNotFound         ;
    LD A, B                     ;
    AND A                       ;
    JP NZ, _eSymNotInRam        ;
    ; Get size of file          ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD L, A                     ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD H, A                     ; FileSize = *(uint16_t *)DE
    ADD HL, DE                  ; DE += 2
    LD (_varFileEnd), HL        ; FileEnd = DE + FileSize

    LD HL, 0                    ; res (HL) = 0
_mainLoopStart:                 ; do {
    CALL Proc_HandleLine        ;
    LD B, 0                     ;
    LD C, A                     ;
    ADD HL, BC                  ;     HL += HandleLine(DE)
    LD B, H                     ;
    LD C, L                     ;
                                ;
    LD A, (_varFileEnd + 1)     ;
    CP D                        ;
    JR C, _done                 ;
    JR NZ, _mainLoopStart       ;
    LD A, (_varFileEnd)         ;
    CP E                        ;
    JR C, _done                 ;
    JR Z, _done                 ;
    JR _mainLoopStart           ; } while (DE < FileEnd)
                                ;
_done:                          ;
    LD (_varRes), HL            ;
    LD HL, _varRes              ;
    CALL Proc_PrintNum          ;
    RET                         ;


; main errors
_eSymNotFound:
    LD HL, _constNotFound
    bcall(_PutS)
    RET
_eSymNotInRam:
    LD HL, _constNotInRam
    bcall(_PutS)
    RET

; main variables
_varRes:
    .dw 0, 0
_varFileEnd:
    .dw 0

; main constants
_constNotFound: .db "Symbol not found", 0
_constNotInRam: .db "Symbol not in ram (archived)", 0
_constStr1Tok:
    .db StrngObj, tVarStrng, tStr1
    .db 0, 0, 0, 0, 0, 0 ; pad to 9

; Proc: HandleLine
; Desc: Read a line from the file and calculate the score it represents
; Input: DE (file pointer)

;   * A (line score)
;   * DE (incremented appropriately)
; Destroys:
;   * B, C
Proc_HandleLine:      ; char *fp (DE)
    LD A, (DE)        ;
    SUB A, 'A' - 1    ; A = *(DE++) - 'A' + 1
    CP A, 1           ;
    JR Z, _otherOK    ;
    CP A, 2           ;
    JR Z, _otherOK    ;
    CP A, 3           ;
    JR Z, _otherOK    ;
    JR _eOtherNotOK   ; if (A != 1 && A != 2 && A != 3) raise OtherNotOK;
_otherOK:
    LD B, A           ; B = A
    INC DE            ;
    LD A, (DE)        ;
    CP ' '            ;
    JR NZ, _eNotSpace ; if (*DE != ' ') raise NotSpaceErr;
    INC DE            ; DE++
    LD A, (DE)        ;
    INC DE            ;
    SUB A, 'X' - 1    ; A = *(DE++) - 'X' + 1
    CP A, 1           ;
    JR Z, _selfOK     ;
    CP A, 2           ;
    JR Z, _selfOK     ;
    CP A, 3           ;
    JR Z, _selfOK     ;
    JR _eSelfNotOK    ; if (A != 1 && A != 2 && A != 3) raise SelfNotOK;
_selfOK:
    LD C, A           ; C = A
    LD A, (DE)        ;
    CP '\n'           ; 
    JR NZ, _eNotNL    ; if (*DE != '\n') raise NotNLErr;
    INC DE            ; DE++;
    
    LD A, C           ;
    SUB 2             ;
    ADD A, B          ;
    CP 0              ;
    JR Z, _set3       ;
    CP 4              ;
    JR Z, _set1       ; A = ((C - 2) + B + 3 - 1) % 3 + 1
                      ; cute arithmetic expression for calculating what we should get:
                      ;   subtract 2 from C to get {-1, 0, 1} for {lose, tie, win}
                      ;   add C to B using wraparound in the tuple (1, 2, 3) (r, p, s)
_end:
    LD B, A           ;
    ADD A, C          ;
    ADD A, C          ;
    ADD A, C          ;
    SUB A, 3          ; A += (C - 1) * 3
    RET
_set3:
    LD A, 3
    JR _end
_set1:
    LD A, 1
    JR _end

_eNotSpace:
    LD HL, _constNotSpace
    bcall(_PutS)
    RET
_eNotNL:
    LD HL, _constNotNL
    bcall(_PutS)
    RET
_eOtherNotOK:
    LD HL, _constOtherNotOK
    bcall(_PutS)
    RET
_eSelfNotOK:
    LD HL, _constSelfNotOK
    bcall(_PutS)
    RET

_constNotSpace:
    .db "Expected space in input line", 0
_constNotNL:
    .db "Expected NL at end of input line", 0
_constOtherNotOK:
    .db "Expected A, B, or C at start of line", 0
_constSelfNotOK:
    .db "Expected X, Y, or Z at end of line", 0

#include "common/printnum.inc"
