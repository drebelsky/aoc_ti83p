#include    "ti83plus.inc"
#define     progStart   $9D95
.org        progStart-2
.db         $BB,$6D
; Proc: main
    ; Look up Str1              ;
    LD HL, _constStr1Tok        ;
    bcall(_Mov9ToOP1)           ;
    bcall(_FindSym)             ; DE = findSym(Str1)
    ; Print errors if not found ;
    JP C, _eSymNotFound         ;
    LD A, B                     ;
    AND A                       ;
    JP NZ, _eSymNotInRam        ;
    ; Get size of file          ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD L, A                     ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD H, A                     ; FileSize = *(uint16_t *)DE
    ADD HL, DE                  ; DE += 2
    LD (_varFileEnd), HL        ; FileEnd = DE + FileSize

    LD HL, 0                    ; res (HL) = 0
_mainLoopStart:                 ; do {
    PUSH HL                     ;
    CALL Proc_HandleLine        ;
    LD B, 0                     ;
    LD C, A                     ;
    POP HL                      ;
    ADD HL, BC                  ;     HL += HandleLine(DE)
                                ;
    LD A, (_varFileEnd + 1)     ;
    CP D                        ;
    JR C, _done                 ;
    JR NZ, _mainLoopStart       ;
    LD A, (_varFileEnd)         ;
    CP E                        ;
    JR C, _done                 ;
    JR Z, _done                 ;
    JR _mainLoopStart           ; } while (DE < FileEnd)
                                ;
_done:                          ;
    LD (_varRes), HL            ;
    LD HL, _varRes              ;
    CALL Proc_PrintNum          ;
    RET                         ;


; main errors
_eSymNotFound:
    LD HL, _constNotFound
    bcall(_PutS)
    RET
_eSymNotInRam:
    LD HL, _constNotInRam
    bcall(_PutS)
    RET

; main variables
_varRes:
    .dw 0, 0
_varFileEnd:
    .dw 0

; main constants
_constNotFound: .db "Symbol not found", 0
_constNotInRam: .db "Symbol not in ram (archived)", 0
_constStr1Tok:
    .db StrngObj, tVarStrng, tStr1
    .db 0, 0, 0, 0, 0, 0 ; pad to 9


; Proc: HandleLine
; Desc: Read a line from the file and calculate whether or not one range fully contains the other
; Input: DE (file pointer)

;   * A (1 if overlap, 0 otherwise)
;   * DE (incremented appropriately)
; Destroys:
;   * BC, HL, IXH
Proc_HandleLine:      ; char *fp (DE)
    ; num1-num2,num3-num4 (B-C, H-L)
    
    ; generated by m4 file
    LD A, (DE)
    INC DE
    SUB '0'
    LD B, A     ; DEST (B) = *(DE++) - '0'

    LD A, (DE)  ;
    CP A, '-'   ; if (*DE == END_CHAR ('-'))
    JR Z, _read2   ;   goto LABEL_AFTER (_read2)
    SUB '0'
    LD IXH, A
    LD A, B
    ADD A, A
    LD B, A
    ADD A, A
    ADD A, A
    ADD A, B
    ADD A, IXH   ; else
    LD B, A     ;
    INC DE      ; DEST (B) = DEST * 10 + *(DE++) - '0'
    ; end generated by m4 file

_read2:
    INC DE
    
    ; generated by m4 file
    LD A, (DE)
    INC DE
    SUB '0'
    LD C, A     ; DEST (C) = *(DE++) - '0'

    LD A, (DE)  ;
    CP A, ','   ; if (*DE == END_CHAR (','))
    JR Z, _read3   ;   goto LABEL_AFTER (_read3)
    SUB '0'
    LD IXH, A
    LD A, C
    ADD A, A
    LD C, A
    ADD A, A
    ADD A, A
    ADD A, C
    ADD A, IXH   ; else
    LD C, A     ;
    INC DE      ; DEST (C) = DEST * 10 + *(DE++) - '0'
    ; end generated by m4 file

_read3:
    INC DE
    
    ; generated by m4 file
    LD A, (DE)
    INC DE
    SUB '0'
    LD H, A     ; DEST (H) = *(DE++) - '0'

    LD A, (DE)  ;
    CP A, '-'   ; if (*DE == END_CHAR ('-'))
    JR Z, _read4   ;   goto LABEL_AFTER (_read4)
    SUB '0'
    LD IXH, A
    LD A, H
    ADD A, A
    LD H, A
    ADD A, A
    ADD A, A
    ADD A, H
    ADD A, IXH   ; else
    LD H, A     ;
    INC DE      ; DEST (H) = DEST * 10 + *(DE++) - '0'
    ; end generated by m4 file

_read4:
    INC DE
    
    ; generated by m4 file
    LD A, (DE)
    INC DE
    SUB '0'
    LD L, A     ; DEST (L) = *(DE++) - '0'

    LD A, (DE)  ;
    CP A, '\n'   ; if (*DE == END_CHAR ('\n'))
    JR Z, _postRead   ;   goto LABEL_AFTER (_postRead)
    SUB '0'
    LD IXH, A
    LD A, L
    ADD A, A
    LD L, A
    ADD A, A
    ADD A, A
    ADD A, L
    ADD A, IXH   ; else
    LD L, A     ;
    INC DE      ; DEST (L) = DEST * 10 + *(DE++) - '0'
    ; end generated by m4 file

; return 1 if L >= C >= H or C >= L >= B
_postRead:
    INC DE
    LD A, L
    CP C
    JR NC, _checkSecond ; L >= C
_tryFirst:
    LD A, C
    CP L
    JR NC, _checkFirst ; C >= L
    JR _notContained
_checkSecond:
    ; check if we also have C >= H
    LD A, C
    CP H
    JR NC, _contained
    JR _tryFirst
_checkFirst:
    ; check if we also have L >= B
    LD A, L
    CP B
    JR NC, _contained
_notContained:
    LD A, 0
    RET
_contained:
    LD A, 1
    RET

#include "common/printnum.inc"
