#include    "ti83plus.inc"
#define     progStart   $9D95
.org        progStart-2
.db         $BB,$6D
; Notes: no directory is descended into more than once (may be ascended) so we
; don't need to store the name
; Struct: directory
; 4 bytes: size
; 2 bytes: parent

; Proc: main
    ; Look up Str1              ;
    LD HL, _constStr1Tok        ;
    bcall(_Mov9ToOP1)           ;
    bcall(_FindSym)             ; DE = findSym(Str1)
    ; Print errors if not found ;
    JP C, _eSymNotFound         ;
    LD A, B                     ;
    AND A                       ;
    JP NZ, _eSymNotInRam        ;
    ; Get size of file          ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD L, A                     ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD H, A                     ; FileSize = *(uint16_t *)DE
    ADD HL, DE                  ; DE += 2
    LD (_varFileEnd), HL        ; FileEnd = DE + FileSize

_loop:
    CALL Proc_HandleLine
    LD A, (_varFileEnd + 1)
    CP D
    JR C, _done
    JR NZ, _loop
    LD A, (_varFileEnd)
    CP E
    JR C, _done
    JR Z, _done
    JR _loop

_done:
    LD IX, Var_Directories
    CALL Proc_MainSub32

    ; loop over directories
_dirLoop:
    LD B, (IX + 3)
    LD A, (_varRes + 3)
    CP B
    JR C, _include
    JR NZ, _increment
_byte2:
    LD B, (IX + 2)
    LD A, (_varRes + 2)
    CP B
    JR C, _include
    JR NZ, _increment
_byte3:
    LD B, (IX + 1)
    LD A, (_varRes + 1)
    CP B
    JR C, _include
    JR NZ, _increment
_byte4:
    LD B, (IX + 0)
    LD A, (_varRes)
    CP B
    JR C, _include
    JR NZ, _increment
_include:
    ; Update _varMinValid if we're smaller
    LD B, (IX + 3)
    LD A, (_varMinValid + 3)
    CP B
    JR Z, _includeByte2
    JR C, _increment
    JR _updateMin
_includeByte2:
    LD B, (IX + 2)
    LD A, (_varMinValid + 2)
    CP B
    JR Z, _includeByte3
    JR C, _increment
    JR _updateMin
_includeByte3
    LD B, (IX + 1)
    LD A, (_varMinValid + 1)
    CP B
    JR Z, _includeByte4
    JR C, _increment
    JR _updateMin
_includeByte4
    LD B, (IX)
    LD A, (_varMinValid)
    CP B
    JR Z, _increment
    JR C, _increment
    ; otherwise, update
_updateMin
    LD A, (IX + 0)
    LD (_varMinValid + 0), A
    LD A, (IX + 1)
    LD (_varMinValid + 1), A
    LD A, (IX + 2)
    LD (_varMinValid + 2), A
    LD A, (IX + 3)
    LD (_varMinValid + 3), A
_increment:
    LD B, 0
    LD C, 6
    ADD IX, BC
    LD B, IXH
    LD C, IXL
    LD HL, (Var_NextDir)
    ; set carry to 0
    OR A
    SBC HL, BC
    JP NZ, _dirLoop

    LD HL, _varMinValid
    CALL Proc_PrintNum
    RET

; main errors
_eSymNotFound:
    LD HL, _constNotFound
    bcall(_PutS)
    RET
_eSymNotInRam:
    LD HL, _constNotInRam
    bcall(_PutS)
    RET

; main variables
_varFileEnd:
    .dw 0
_varRes:
    .db $00, $5a, $62, $2 ; 40000000
_varMinValid:
    .fill 4, $ff
; main constants
_constNotFound: .db "Symbol not found", 0
_constNotInRam: .db "Symbol not in ram (archived)", 0
_constStr1Tok:
    .db StrngObj, tVarStrng, tStr1
    .db 0, 0, 0, 0, 0, 0 ; pad to 9

; Global variables
Var_CurDir:  .dw 0 ; pointer to current directory (the one we're in)
Var_NextDir: .dw Var_Directories ; pointer to next unallocated directory
Var_Directories:
    .fill 256 * 6

; Proc: HandleLine
; Desc: Handle one line from the file
; Input: DE (file pointer), Var_CurDir, Var_NextDir, Var_Directories
; Output:
;   * DE incremented as appropriate, Var_CurDir/Var_NextDir, Var_Directories updated as appropriate
; Destroys:
;   * ALL (not technically, but makes it easier)
Proc_HandleLine:
    LD A, (DE)
    INC DE
    CP 'd'
    JP Z, _toNL
    CP '$'
    JR NZ, _readNum
    INC DE
    LD A, (DE)
    INC DE
    CP 'l'
    JP Z, _toNL ; can ignore ls commands since we'll parse their output
    ; must have CD, advance to name
    INC DE ; d
    INC DE ; ' '
    LD A, (DE)
    CP '.'
    JR Z, _goUp
    ; otherwise, we have a slash or name, which are only visited once, so we can just create the new entry
    LD HL, (Var_NextDir)
    LD B, 0
    LD C, 4
    ADD HL, BC
    LD BC, (Var_CurDir)
    LD (HL), C
    INC HL
    LD (HL), B
    INC HL
    LD (Var_NextDir), HL
    LD B, 0
    LD C, 6
    OR A ; clear carry flag
    SBC HL, BC
    LD (Var_CurDir), HL
    JP _toNL

_goUp:
    LD IX, (Var_CurDir)
    LD A, (IX + 4)
    LD (Var_CurDir), A
    LD A, (IX + 5)
    LD (Var_CurDir + 1), A
    JP _toNL

_readNum:
    LD HL, 0
    LD (_varRLNum), HL
    LD (_varRLNum + 2), HL
    SUB '0'
    LD (_varRLNum), A
_readNumLoop:
    LD A, (DE)
    CP ' '
    JR Z, _addNum
    SUB '0'
    INC DE
    ; first multiply by 10 (yes, this is an inefficient, but convenient way to do this)
    PUSH DE
    LD HL, _varRLNum
    CALL Proc_Add32 ; * 2 from orig
    ; Store this val
    LD HL, (_varRLNum)
    LD (_varRLNumTmp), HL
    LD HL, (_varRLNum + 2)
    LD (_varRLNumTmp + 2), HL
    LD HL, _varRLNum
    CALL Proc_Add32 ; * 4 from orig
    LD HL, _varRLNum
    CALL Proc_Add32 ; * 8 from orig
    ; Now swap _varRLNum and _varRLNumTmp so that we can use the add procedure
    LD HL, (_varRLNum)
    LD BC, (_varRLNumTmp)
    LD (_varRLNum), BC
    LD (_varRLNumTmp), HL
    LD HL, (_varRLNum + 2)
    LD BC, (_varRLNumTmp + 2)
    LD (_varRLNum + 2), BC
    LD (_varRLNumTmp + 2), HL
    LD HL, _varRLNumTmp
    Call Proc_Add32
    LD HL, (_varRLNumTmp)
    LD (_varRLNum), HL
    LD HL, (_varRLNumTmp + 2)
    LD (_varRLNum + 2), HL
    POP DE

    ; Now add in A
    LD HL, _varRLNum
    ; it would probably be more efficient to do two 16-bit adds, but more annoying
    LD B, (HL)
    ADC A, B
    LD (HL), A
    INC HL

    LD A, (HL)
    ADC A, 0
    LD (HL), A
    INC HL

    LD A, (HL)
    ADC A, 0
    LD (HL), A
    INC HL

    LD A, (HL)
    ADC A, 0
    LD (HL), A
    JR _readNumLoop
_addNum:
    PUSH DE
    LD HL, (Var_CurDir)
_addNumLoop:
    CALL Proc_Add32
    LD A, H
    AND A
    JR Z, _addNumLoopEnd
    INC HL
    LD A, (HL)
    AND A
    JR Z, _addNumLoopEnd
    LD B, (HL)
    DEC HL
    LD L, (HL)
    LD H, B
    JR _addNumLoop
_addNumLoopEnd
    POP DE
    ; fallthrough to reading newline
_toNL:
    LD A, (DE)
    INC DE
    CP '\n'
    JR NZ, _toNL
    RET

_varRLNum:
    .fill 4
_varRLNumTmp:
    .fill 4

; Proc: Add32
; Desc: Adds two 32 bit numbers ((HL) = _varRLNum + (HL))
; Input: HL, _varRLNum
; Output:
;   * Memory pointed to by HL is incremented by _varRLNum
;   * HL is incremented by 4
; Destroys:
;   * BC, DE
Proc_Add32:
    ; low two bytes
    LD D, H
    LD E, L
    LD C, (HL)
    INC HL
    LD B, (HL)
    LD HL, (_varRLNum)
    ADD HL, BC
    LD B, H
    LD C, L
    LD H, D
    LD L, E
    LD (HL), C
    INC HL
    LD (HL), B
    INC HL

    ; high two bytes
    LD D, H
    LD E, L
    LD C, (HL)
    INC HL
    LD B, (HL)
    LD HL, (_varRLNum + 2)
    ADC HL, BC
    LD B, H
    LD C, L
    LD H, D
    LD L, E
    LD (HL), C
    INC HL
    LD (HL), B
    INC HL
    RET

; Proc: MainAdd32
; Desc: Adds two 32 bit numbers (_varRes = _varRes + (IX))
; Input: IX, _varRLNum
; Output:
;   * Memory at _varRes is incremented by memory pointed to by IX
; Destroys:
;   * BC, HL
Proc_MainAdd32:
    ; low two bytes
    LD C, (IX )
    LD B, (IX + 1)
    LD HL, (_varRes)
    ADD HL, BC
    LD (_varRes), HL

    ; high two bytes
    LD C, (IX + 2)
    LD B, (IX + 3)
    LD HL, (_varRes + 2)
    ADC HL, BC
    LD (_varRes + 2), HL
    RET

; Proc: MainSub32
; Desc: Subtracts two 32 bit numbers (_varRes = (IX) - _varRes)
; Input: IX, _varRLNum
; Output:
;   * Memory at _varRes becomes the result of subtracting _varRes from IX
; Destroys:
;   * BC, HL
Proc_MainSub32:
    ; low two bytes
    LD L, (IX )
    LD H, (IX + 1)
    LD BC, (_varRes)
    OR A ; reset carry flag
    SBC HL, BC
    LD (_varRes), HL

    ; high two bytes
    LD L, (IX + 2)
    LD H, (IX + 3)
    LD BC, (_varRes + 2)
    SBC HL, BC
    LD (_varRes + 2), HL
    RET

#include "common/printnum.inc"
