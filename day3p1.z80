; Note: Need an extra blank line at the end of the file
#include    "ti83plus.inc"
#define     progStart   $9D95
.org        progStart-2
.db         $BB,$6D
; Proc: main
    ; Look up Str1              ;
    LD HL, _constStr1Tok        ;
    bcall(_Mov9ToOP1)           ;
    bcall(_FindSym)             ; DE = findSym(Str1)
    ; Print errors if not found ;
    JP C, _eSymNotFound         ;
    LD A, B                     ;
    AND A                       ;
    JP NZ, _eSymNotInRam        ;
    ; Get size of file          ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD L, A                     ;
    LD A, (DE)                  ;
    INC DE                      ;
    LD H, A                     ; FileSize = *(uint16_t *)DE
    ADD HL, DE                  ; DE += 2
    LD (_varFileEnd), HL        ; FileEnd = DE + FileSize

    LD HL, 0                    ; res (HL) = 0
_mainLoopStart:                 ; do {
    PUSH HL
    CALL Proc_HandleLine        ;
    POP HL
    LD B, 0                     ;
    LD C, A                     ;
    ADD HL, BC                  ;     HL += HandleLine(DE)
                                ;
    LD A, (_varFileEnd + 1)     ;
    CP D                        ;
    JR C, _done                 ;
    JR NZ, _mainLoopStart       ;
    LD A, (_varFileEnd)         ;
    CP E                        ;
    JR C, _done                 ;
    JR Z, _done                 ;
    JR _mainLoopStart           ; } while (DE < FileEnd)
                                ;
_done:                          ;
    LD (_varRes), HL            ;
    LD HL, _varRes              ;
    CALL Proc_PrintNum          ;
    RET                         ;


; main errors
_eSymNotFound:
    LD HL, _constNotFound
    bcall(_PutS)
    RET
_eSymNotInRam:
    LD HL, _constNotInRam
    bcall(_PutS)
    RET

; main variables
_varRes:
    .dw 0, 0
_varFileEnd:
    .dw 0

; main constants
_constNotFound: .db "Symbol not found", 0
_constNotInRam: .db "Symbol not in ram (archived)", 0
_constStr1Tok:
    .db StrngObj, tVarStrng, tStr1
    .db 0, 0, 0, 0, 0, 0 ; pad to 9

; Proc: HandleLine
; Desc: Read a line from the file and calculate which item overlaps
; Input: DE (file pointer)

;   * A (score of overlapping item)
;   * DE (incremented appropriately)
; Destroys:
;   * HL, BC, IXH, IXL
Proc_HandleLine:      ; char *fp (DE)
    ; Zero out vars
    LD HL, 0
    LD (_varOne), HL
    LD (_varOne + 2), HL
    LD (_varOne + 4), HL
    LD (_varOne + 6), HL
    LD (_varOne + 8), HL
    LD (_varOne + 10), HL
    LD (_varOne + 12), HL
    ; Find EOL
    LD H, D                  ;
    LD L, E                  ;
    LD A, 1                  ;
_loop:                       ;
    LD A, (HL)               ;
    CP A, '\n'               ;
    JR Z, _found             ;
    INC HL                   ;
    JR _loop                 ;
_found:                      ;
    OR A                     ; clear carry flag
    SBC HL, DE               ;
    LD A, L                  ;
    SRL A                    ;
    LD IXH, A                ; IXH = len(line) / 2
    LD IXL, 0                ; IXL = counter
                             ;
_loopFirst:                  ; for (counter = 0; counter < len(line) / 2; counter++) {
    LD A, (DE)               ;
    INC DE                   ;   ch (A) = *(DE++)
    CP 'a' ; note 'a' > 'Z'  ;
    JR C, _loopFirstUpper    ;
_loopFirstLower:             ;
    SUB A, 'a' - 1           ;   if (ch >= 'a') ch = ch - 'a' + 1
    JR _loopFirstCont        ;
_loopFirstUpper:             ;   if (ch < 'a')  ch = ch - 'A' + 27
    SUB A, 'A' - 27          ;
_loopFirstCont:              ;
    LD L, A                  ;   
    SRL A                    ;
    SRL A                    ;
    SRL A                    ;   bucket (C) = ch >> 3;
    LD C, A                  ;
    LD A, L                  ;
    AND A, %111              ;
    LD B, 1                  ;
_loopFirstInner:             ;
    OR A                     ;
    JR Z, _loopFirstInnerEnd ;
    DEC A                    ;
    SLA B                    ;
    JR _loopFirstInner       ;
_loopFirstInnerEnd:          ;   val (B) = 1 << (A & 0b111)
    LD HL, _varOne           ;
    LD A, C                  ;
    ADD A, L                 ;
    LD L, A                  ;
    LD A, 0                  ;
    ADC A, H                 ;
    LD H, A                  ;
    LD A, (HL)               ;
    OR B                     ;
    LD (HL), A               ;   *(char *)_varOne + bucket |= val;
    INC IXL                  ;
    LD A, IXL                ;
    CP IXH                   ;
    JR NZ, _loopFirst        ; }
                             ;
    LD IXL, 0                ; identical, except storing in varTwo
_loopSecond:                 ; for (counter = 0; counter < len(line) / 2; counter++) {
    LD A, (DE)               ;
    INC DE                   ;   ch (A) = *(DE++)
    CP 'a' ; note 'a' > 'Z'  ;
    JR C, _loopSecondUpper   ;
_loopSecondLower:            ;
    SUB A, 'a' - 1           ;   if (ch >= 'a') ch = ch - 'a' + 1
    JR _loopSecondCont       ;
_loopSecondUpper:            ;
    SUB A, 'A' - 27          ;   if (ch < 'a')  ch = ch - 'A' + 27
_loopSecondCont:             ;
    LD L, A                  ;   
    SRL A                    ;
    SRL A                    ;
    SRL A                    ;   bucket (C) = ch >> 3;
    LD C, A                  ;
    LD A, L                  ;
    AND A, %111              ;
    LD B, 1                  ;
_loopSecondInner:            ;
    OR A                     ;
    JR Z, _loopSecondInnerEnd;
    DEC A                    ;
    SLA B                    ;
    JR _loopSecondInner      ;
_loopSecondInnerEnd:         ;   val (B) = 1 << (A & 0b111)
    LD HL, _varTwo           ;
    LD A, C                  ;
    ADD A, L                 ;
    LD L, A                  ;
    LD A, 0                  ;
    ADC A, H                 ;
    LD H, A                  ;
    LD A, (HL)               ;
    OR B                     ;
    LD (HL), A               ;   *(char *)_varOne + bucket |= val;
    INC IXL                  ;
    LD A, IXL                ;
    CP IXH                   ;
    JR NZ, _loopSecond       ; }
                             ;
    INC DE                   ; DE++; // skip past newline
    LD IX, _varTwo           ; int i;
    LD A, (_varOne)          ; for (i = 0; i < 7; i++) {
    AND (IX)                 ;
    JR NZ, _byte0            ;
    LD A, (_varOne + 1)      ;
    AND (IX + 1)             ;
    JR NZ, _byte1            ;
    LD A, (_varOne + 2)      ;
    AND (IX + 2)             ;
    JR NZ, _byte2            ;
    LD A, (_varOne + 3)      ;
    AND (IX + 3)             ;
    JR NZ, _byte3            ;
    LD A, (_varOne + 4)      ;
    AND (IX + 4)             ;
    JR NZ, _byte4            ;
    LD A, (_varOne + 5)      ;
    AND (IX + 5)             ;
    JR NZ, _byte5            ;
    LD A, (_varOne + 6)      ;
    AND (IX + 6)             ;
    JR NZ, _byte6            ;
    JR _eNoOverlap           ;   if (((char *)_varOne)[i] == ((char *)_varTwo)[i]) break;
_byte0:                      ; }
    LD B, 0                  ;
    JR _findBit              ;
_byte1:                      ;
    LD B, $8                 ;
    JR _findBit              ;
_byte2:                      ;
    LD B, $10                ;
    JR _findBit              ;
_byte3:                      ;
    LD B, $18                ;
    JR _findBit              ;
_byte4:                      ;
    LD B, $20                ;
    JR _findBit              ;
_byte5:                      ;
    LD B, $28                ;
    JR _findBit              ;
_byte6:                      ;
    LD B, $30                ; offset = 8 * i;
    ; JR _findBit            ; fallthrough
_findBit:
    BIT 0, A                 ;
    JR NZ, _add0             ;
    BIT 1, A                 ;
    JR NZ, _add1             ;
    BIT 2, A                 ;
    JR NZ, _add2             ;
    BIT 3, A                 ;
    JR NZ, _add3             ;
    BIT 4, A                 ;
    JR NZ, _add4             ;
    BIT 5, A                 ;
    JR NZ, _add5             ;
    BIT 6, A                 ;
    JR NZ, _add6             ;
; _add8: fallthrough         ; int j
_add7:                       ; for (j = 0; j < 8; j++) {
    LD A, 7                  ;   if (((_varOne[i] & _varTwo[i]) >> j) & 1) break;
    ADD A, B                 ; }
    RET                      ;
_add0:                       ;
    LD A, B                  ;
    RET                      ;
_add1:                       ;
    LD A, 1                  ;
    ADD A, B                 ;
    RET                      ;
_add2:                       ;
    LD A, 2                  ;
    ADD A, B                 ;
    RET                      ;
_add3:                       ;
    LD A, 3                  ;
    ADD A, B                 ;
    RET                      ;
_add4:                       ;
    LD A, 4                  ;
    ADD A, B                 ;
    RET                      ;
_add5:                       ;
    LD A, 5                  ;
    ADD A, B                 ;
    RET                      ;
_add6:                       ;
    LD A, 6                  ;
    ADD A, B                 ;
    RET                      ; return offset + j;


_eNoOverlap:
    LD HL, _constNoOverlap
    RET

_varOne:
    .fill 7
_varTwo:
    .fill 7

_constNoOverlap:
    .db "No overlap detected", 0

; Proc: PrintNum
; Desc: Print out a number in decimal
; Input: HL (pointer to 32 bit LE value)
; Output: None
; Destroys:
;   * Op1, Op2, AF, BC, DE,  HL, IX
Proc_PrintNum:
                          ; Load Op1 (big endian) from LE value
    LD A, (HL)            ;
    LD (Op1 + 3), A       ;
    INC HL                ;
    LD A, (HL)            ;
    LD (Op1 + 2), A       ;
    INC HL                ;
    LD A, (HL)            ;
    LD (Op1 + 1), A       ;
    INC HL                ;
    LD A, (HL)            ;
    LD (Op1), A           ; Op1 = *(uint32_t *)HL (with byte swap from LE to BE)
                          ;
    LD DE, 10             ;
    LD HL, _varNum + 9    ; HL = (char *)_varNum + 9
_loop32:                  ; while(true) {
        PUSH HL           ;
        bcall(_Div32By16) ;   Op1, Op2 = divmod(Op1, 10)
        POP HL            ;
        LD A, (Op2 + 3)   ;
        ADD A, '0'        ;
        LD (HL), A        ;
        DEC HL            ;   *(HL--) = Op2 + '0'
        LD A, (Op1)       ;
        OR A              ;
        JR NZ, _loop32    ;
        LD A, (Op1 + 1)   ;
        OR A              ;
        JR NZ, _loop32    ;   if (Op1 & 0xffff == Op1) break; // if we can fit in 16 bits
                          ; }
    LD D, H               ;
    LD E, L               ; DE = HL
    LD HL, (Op1 + 2)      ;
    LD A, H               ;
    LD H, L               ;
    LD L, A               ; HL = Op1 w/ byte swap from BE to LE
_loop16:                  ; while (HL != 0) {
        LD A, H           ;
        OR A              ;
        JR NZ, _l16_cont  ;
        LD A, L           ;
        OR A              ;
        JR Z, _print      ;
_l16_cont:                ;
        bcall(_DivHLBy10) ;   HL, A = divmod(HL, 16)
        ADD A, '0'        ;
        LD (DE), A        ;
        DEC DE            ;   *(DE--) = A + '0'
        JR _loop16        ; }
_print:                   ;
        INC DE            ;
        LD H, D           ;
        LD L, E           ;
        bcall(_PutS)      ; PutS(DE + 1)
        RET               ; return

; PrintNum Vars
_varNum:
    .fill 10 ; maximum base 10 representation of a 32 bit number is 10 digits long
    .db 0    ; null terminate
